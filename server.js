import express from 'express';
import axios from 'axios';
import vision from '@google-cloud/vision';
import dotenv from 'dotenv';
dotenv.config();

const app = express();
app.use(express.json());

const LINE_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;

// Google Vision Client
const visionClient = new vision.ImageAnnotatorClient({
  credentials: JSON.parse(process.env.GOOGLE_CREDENTIALS)
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE
async function getImageFromLine(messageId) {
  const res = await axios.get(
    `https://api-data.line.me/v2/bot/message/${messageId}/content`,
    {
      headers: { Authorization: `Bearer ${LINE_TOKEN}` },
      responseType: 'arraybuffer'
    }
  );
  return res.data;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å OCR ‚Üí ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î
function parseSummary(text) {
  console.log("text ORIGIN", text);
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
  let lines = text
    .split('\n')
    .map(l => l.replace(/\s+/g, ' ').trim())
    .filter(Boolean);

  console.log("OCR Lines ver: 2.1", lines);

  // ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÉ‡∏ô 1 cell
  lines = lines.flatMap(item => {
    if (/^\d+\s+\d+$/.test(item)) {
      return item.split(/\s+/);
    }
    return item;
  });

  // ‡∏´‡∏≤ header index
  const headerIndex = lines.findIndex(l => l.includes('‡πÅ‡∏ú‡∏ô‡∏Å'));
  if (headerIndex === -1) return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å';

  // ‡πÄ‡∏≠‡∏≤ header ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const headers = ['‡πÅ‡∏ú‡∏ô‡∏Å', '‡∏¢‡∏≠‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', '‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'];
  let rawData = lines.slice(headerIndex + 1);

  let dataRows = [];
  for (let i = 0; i < rawData.length; i += headers.length) {
    let row = {};
    headers.forEach((h, idx) => {
      row[h] = rawData[i + idx] || '';
    });
    dataRows.push(row);
  }

  if (!dataRows.length) return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å';

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
  let message = 'üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥\n';
  dataRows.forEach(row => {
    const today = parseInt(row['‡∏¢‡∏≠‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'].replace(/[^\d]/g, ''), 10) || 0;
    const target = parseInt(row['‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'].replace(/[^\d]/g, ''), 10) || 0;
    const diff = today - target;
    message += `\n‡πÅ‡∏ú‡∏ô‡∏Å ${row['‡πÅ‡∏ú‡∏ô‡∏Å']}\n`;
    message += `‡∏¢‡∏≠‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${today}\n`;
    message += `‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${target}\n`;
    message += `‡πÄ‡∏õ‡πâ‡∏≤/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: ${diff} ‡∏ö‡∏≤‡∏ó\n`;
  });

  return message;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏≤‡∏á LINE
async function replyMessage(replyToken, text) {
  await axios.post('https://api.line.me/v2/bot/message/reply', {
    replyToken,
    messages: [{ type: 'text', text }]
  }, {
    headers: { Authorization: `Bearer ${LINE_TOKEN}` }
  });
}

// Webhook
app.post('/webhook', async (req, res) => {
  try {
    const events = req.body.events || [];

    for (const event of events) {
      if (event.type === 'message' && event.message.type === 'image') {
        try {
          const imgBuffer = await getImageFromLine(event.message.id);
          const [result] = await visionClient.textDetection({ image: { content: imgBuffer } });
          const text = result.fullTextAnnotation ? result.fullTextAnnotation.text : '';
          const summary = parseSummary(text);
          await replyMessage(event.replyToken, summary || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡πà‡∏∞');
        } catch (err) {
          console.error('Error processing image:', err);
          await replyMessage(event.replyToken, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏Ñ‡πà‡∏∞');
        }
      } else {
        await replyMessage(event.replyToken, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡πà‡∏∞');
      }
    }
    res.sendStatus(200);
  } catch (err) {
    console.error('Webhook error:', err);
    res.sendStatus(200); // ‡∏ï‡∏≠‡∏ö 200 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ LINE retry
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
